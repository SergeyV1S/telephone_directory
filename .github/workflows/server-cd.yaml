name: server-cd

env:
  APPNAME: telephone_directory
  API_PORT: ${{ secrets.API_PORT }}
  NODE_ENV: prod
  LOCALE: false
  PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
  SECRET: ${{ secrets.SECRET }}
  CLIENT_BASE_URL: ${{ secrets.CLIENT_BASE_URL }}
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_USER: ${{ secrets.DATABASE_USER }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  build:
    name: Build and Push Docker Image
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Server Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.SERVER_REPOSITORY_NAME }}:latest
          build-args: |
            APPNAME=${{ env.APPNAME }}
            API_PORT=${{ env.API_PORT }}
            LOCALE=false
            NODE_ENV=prod
            PRODUCTION_URL=${{ env.PRODUCTION_URL }}
            SECRET=${{ env.SECRET }}
            CLIENT_BASE_URL=${{ env.CLIENT_BASE_URL }}
            DATABASE_HOST=${{ env.DATABASE_HOST }}
            DATABASE_PORT=${{ env.DATABASE_PORT }}
            DATABASE_USER=${{ env.DATABASE_USER }}
            DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
            DATABASE_NAME=${{ env.DATABASE_NAME }}
            DATABASE_URL=${{ env.DATABASE_URL }}

  deploy:
    name: Deploy using Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} > ~/.ssh/known_hosts

      - name: Copy docker-compose file
        run: scp -o StrictHostKeyChecking=no ./docker-compose.prod.yaml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.PATH_TO_PROJECT }}/docker-compose.yml

      - name: Deploy to production
        run: |
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            cd ${{ secrets.PATH_TO_PROJECT }}
            
            if [ ! "$(docker ps -q -f name=db)" ]; then
              echo "Initial deployment - starting all services"
              docker-compose up -d
            else
              echo "Updating only application container"
              docker-compose pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.SERVER_REPOSITORY_NAME }}
              docker-compose up -d --no-deps ${{ secrets.DOCKER_USERNAME }}/${{ secrets.SERVER_REPOSITORY_NAME }}
            fi
            
            docker image prune -f
          EOF